#!/usr/bin/env python3

import argparse
import json
import requests
from pprint import pprint

install = []

def search_dependencies (pkg):
    if all ([pkg["dependencies"] != [],
                not pkg['is_duplicate'],
                pkg['name'] not in ['ocaml', 'ocaml-config', 'ocaml-variants', 'base-domains']]):
        install.append({
            'name': pkg['name'],
            'version': pkg['version'],
        })
        for pkg in (pkg['dependencies']):
            search_dependencies(pkg)

def parse (url_section):
    lines = url_section.split('\n')
    tar_url = None
    chktype = None
    chksum = None
    for i in lines:
        i = i.strip()
        if i.startswith('"http'):
            tar_url = i.strip().strip('"')
        if i.startswith('src: "http') or i.startswith('archive: "'):
            tar_url = i[i.index('"http'):].strip().strip('"')
        if i.startswith('checksum: "'):
            chktype = "md5"
            chksum = i[i.index('checksum: "')+11:].strip().strip('"')
        if i.startswith('"sha256') or i.startswith('checksum: "sha256'):
            chktype = "sha256"
            chksum = i[i.index('"sha256')+8:].strip().strip('"')
            break
        if i.startswith('"sha512') or i.startswith('checksum: "sha512'):
            chktype = "sha512"
            chksum = i[i.index('"sha512')+8:].strip().strip('"')
            break
        if i.startswith('"md5') or i.startswith('checksum: "md5'):
            chktype = "md5"
            chksum = i[i.index('"md5')+5:].strip().strip('"')
            break
    return (tar_url, chktype, chksum)

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('opam_deps',  help='Path to the .json file generated by: opam tree --json=deps.json [PACKAGE]')
    parser.add_argument('--generate', help='Generates Flatpak manifest code for given package', dest='PACKAGE', action='store', required=False)
    parser.add_argument('--install',  help='Do not construct cache file structure', action='store_true', required=False)
    args = parser.parse_args()

    with open(args.opam_deps, 'r') as f:
        data = json.load(f)
        main_pkg = data['tree'][0]
        install.append({
            'name': main_pkg['name'],
            'version': main_pkg['version'],
        })
        deps = main_pkg['dependencies']
        for pkg in deps:
            search_dependencies(pkg)

    sources = []
    for pkg in install:
        url = 'https://raw.githubusercontent.com/ocaml/opam-repository/master/packages/{}/{}.{}/opam'.format(pkg['name'], pkg['name'], pkg['version'])
        response = requests.get(url)

        try:
            url_section = response.text.split('url {', 1)[1].split('}')[0]
        except:
            continue

        tar_url, chktype, chksum = parse(url_section)
        if args.install:
            sources.append({
                'type': 'archive',
                'url': tar_url,
                'name': '{}'.format(pkg['name']),
                chktype: chksum,
                'dest': 'packages/{}-{}'.format(pkg['name'], pkg['version'])
            })
        else:
            sources.append({
                'type': 'file',
                'url': tar_url,
                'name': '{}.{}'.format(pkg['name'], pkg['version']),
                chktype: chksum,
                'dest': 'cache/{}/{}'.format(chktype, chksum[:2]),
                'dest-filename': chksum
            })

    print (json.dumps(sources, indent=2))

    if args.PACKAGE:
        deps = ""
        for source in sources:
            deps += source['name'] + ' '
        print()
        print('# Manifest code generated by flatpak-opam-generator')
        print('- name: {}'.format(args.PACKAGE))
        print('  buildsystem: simple')
        print('  #build-options:')
        print('  #  append-path:')
        print('  #  env:')
        print('  #    OPAMROOT:')
        print('  #    OPAMSWITCH:')
        print('  sources:')
        print('    - sources/{}.json'.format(args.PACKAGE))
        if args.install:
            print('  build-commands:')
            print('    - >')
            print('      for pkg in {}; do'.format(deps))
            print('        opam pin -y --no-action --assume-depexts --ignore-pin-depends $pkg packages/$pkg-*')
            print('      done')
            print('    - opam install -y {} packages/{}-*'.format(args.PACKAGE, args.PACKAGE))
            print('  post-install:')
            print('    - opam info --field name,all-installed-versions {}'.format(args.PACKAGE))
        else:
            print('    - type: git')
            print('      branch: master')
            print('      url: https://github.com/ocaml/opam-repository')
            print('  build-commands:')
            print('    - ls -A --color=never | grep -Ev "cache|packages|repo" | xargs rm -rf')
            print('    - opam admin filter -y {}'.format(deps))
            print('    - opam admin cache')
            print('    - opam repo add {} .'.format(args.PACKAGE))
            print('    - opam install -y {}'.format(deps))
            print('    - opam repo remove --all {}'.format(args.PACKAGE))
            print('  post-install:')
            print('    - opam info --field name,all-installed-versions {}'.format(args.PACKAGE))

if __name__ == '__main__':
    main()
