#!/usr/bin/env python3

__license__ = 'GPL-3.0+'

import argparse
import json
import hashlib
import os
import subprocess
import tempfile
import urllib.request

parser = argparse.ArgumentParser()
parser.add_argument('packages', nargs='+')
parser.add_argument('--runtime', action='store_true',
                    help='Generate manifest for a runtime (install packages '
                         'in /usr instead of /app)')
opts = parser.parse_args()

def get_pypi_url(name: str, filename: str) -> str:
    url = 'https://pypi.python.org/pypi/{}/json'.format(name)
    print('Extracting download url for', name)
    with urllib.request.urlopen(url) as response:
        body = json.loads(response.read().decode('utf-8'))
        for release in body['releases'].values():
            for source in release:
                if source['filename'] == filename:
                    return source['url']
        else:
            raise Exception('Failed to extract url from {}'.format(url))


def get_file_hash(filename: str) -> str:
    sha = hashlib.sha256()
    print('Generating hash for', filename)
    with open(filename, 'rb') as f:
        while True:
            data = f.read(1024 * 1024 * 32)
            if not data:
                break
            sha.update(data)
        return sha.hexdigest()

with tempfile.TemporaryDirectory(prefix='pip-generator-{}-'.format(opts.packages[0])) as tempdir:
    subprocess.run([
        'pip3', 'download',
        '--no-binary', ':all:',
        '--dest', tempdir,
    ] + opts.packages, check=True)

    prefix_option = '' if opts.runtime else '--prefix=/app '
    main_module = {
            'name': opts.packages[0],
            'buildsystem': 'simple',
            'build-commands': [
                'pip3 install --no-index --find-links "file://${PWD}" ' + \
                    prefix_option + \
                    ' '.join(opts.packages)
            ],
            'sources': []
    }
    for filename in os.listdir(tempdir):
        name = filename.rsplit('-', 1)[0]
        if name == 'setuptools':  # Already installed
            continue
        sha256 = get_file_hash(os.path.join(tempdir, filename))
        url = get_pypi_url(name, filename)
        source = {
            'type': 'file',
            'url': url,
            'sha256': sha256,
        }
        main_module['sources'].append(source)

with open(opts.packages[0] + '.json', 'w') as output:
    output.write(json.dumps(main_module, indent=4))
